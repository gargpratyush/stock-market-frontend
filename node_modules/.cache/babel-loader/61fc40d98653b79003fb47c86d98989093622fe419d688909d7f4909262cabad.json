{"ast":null,"code":"import { useMemo as n, Fragment as e, createElement as i, useRef as o, useState as t, useCallback as r } from \"react\";\nimport { Container as l, useDimensions as u, SvgWrapper as a, ResponsiveWrapper as d, getRelativeCursor as s } from \"@nivo/core\";\nimport { scaleLinear as c } from \"d3-scale\";\nimport { Delaunay as h } from \"d3-delaunay\";\nimport { jsx as f, jsxs as v, Fragment as p } from \"react/jsx-runtime\";\nfunction m() {\n  return m = Object.assign || function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var i = arguments[e];\n      for (var o in i) Object.prototype.hasOwnProperty.call(i, o) && (n[o] = i[o]);\n    }\n    return n;\n  }, m.apply(this, arguments);\n}\nvar y = {\n    xDomain: [0, 1],\n    yDomain: [0, 1],\n    layers: [\"links\", \"cells\", \"points\", \"bounds\"],\n    enableLinks: !1,\n    linkLineWidth: 1,\n    linkLineColor: \"#bbbbbb\",\n    enableCells: !0,\n    cellLineWidth: 2,\n    cellLineColor: \"#000000\",\n    enablePoints: !0,\n    pointSize: 4,\n    pointColor: \"#666666\",\n    role: \"img\"\n  },\n  g = function (n) {\n    return \"function\" == typeof n ? n : function (e) {\n      return e[n];\n    };\n  },\n  b = function (n) {\n    var e = n.points,\n      i = n.x,\n      o = void 0 === i ? \"x\" : i,\n      t = n.y,\n      r = void 0 === t ? \"y\" : t,\n      l = g(o),\n      u = g(r);\n    return e.map(function (n) {\n      return [l(n), u(n)];\n    });\n  },\n  k = function (n) {\n    var e = n.points,\n      i = n.width,\n      o = n.height,\n      t = n.debug,\n      r = h.from(e),\n      l = t ? r.voronoi([0, 0, i, o]) : void 0;\n    return {\n      delaunay: r,\n      voronoi: l\n    };\n  },\n  x = function (e) {\n    var i = e.points,\n      o = e.x,\n      t = e.y,\n      r = e.width,\n      l = e.height,\n      u = e.debug,\n      a = n(function () {\n        return b({\n          points: i,\n          x: o,\n          y: t\n        });\n      }, [i, o, t]);\n    return n(function () {\n      return k({\n        points: a,\n        width: r,\n        height: l,\n        debug: u\n      });\n    }, [a, r, l, u]);\n  },\n  C = function (e) {\n    var i = e.data,\n      o = e.width,\n      t = e.height,\n      r = e.xDomain,\n      l = e.yDomain,\n      u = n(function () {\n        return c().domain(r).range([0, o]);\n      }, [r, o]),\n      a = n(function () {\n        return c().domain(l).range([0, t]);\n      }, [l, t]),\n      d = n(function () {\n        return i.map(function (n) {\n          return {\n            x: u(n.x),\n            y: a(n.y),\n            data: n\n          };\n        });\n      }, [i, u, a]);\n    return n(function () {\n      var n = h.from(d.map(function (n) {\n          return [n.x, n.y];\n        })),\n        e = n.voronoi([0, 0, o, t]);\n      return {\n        points: d,\n        delaunay: n,\n        voronoi: e\n      };\n    }, [d, o, t]);\n  },\n  L = function (e) {\n    var i = e.points,\n      o = e.delaunay,\n      t = e.voronoi;\n    return n(function () {\n      return {\n        points: i,\n        delaunay: o,\n        voronoi: t\n      };\n    }, [i, o, t]);\n  },\n  w = [\"theme\"],\n  W = function (n) {\n    var o = n.data,\n      t = n.width,\n      r = n.height,\n      l = n.margin,\n      d = n.layers,\n      s = void 0 === d ? y.layers : d,\n      c = n.xDomain,\n      h = void 0 === c ? y.xDomain : c,\n      v = n.yDomain,\n      p = void 0 === v ? y.yDomain : v,\n      m = n.enableLinks,\n      g = void 0 === m ? y.enableLinks : m,\n      b = n.linkLineWidth,\n      k = void 0 === b ? y.linkLineWidth : b,\n      x = n.linkLineColor,\n      w = void 0 === x ? y.linkLineColor : x,\n      W = n.enableCells,\n      D = void 0 === W ? y.enableCells : W,\n      M = n.cellLineWidth,\n      P = void 0 === M ? y.cellLineWidth : M,\n      O = n.cellLineColor,\n      S = void 0 === O ? y.cellLineColor : O,\n      j = n.enablePoints,\n      z = void 0 === j ? y.enableCells : j,\n      A = n.pointSize,\n      E = void 0 === A ? y.pointSize : A,\n      H = n.pointColor,\n      B = void 0 === H ? y.pointColor : H,\n      F = n.role,\n      I = void 0 === F ? y.role : F,\n      q = u(t, r, l),\n      G = q.outerWidth,\n      J = q.outerHeight,\n      K = q.margin,\n      N = q.innerWidth,\n      Q = q.innerHeight,\n      R = C({\n        data: o,\n        width: N,\n        height: Q,\n        xDomain: h,\n        yDomain: p\n      }),\n      T = R.points,\n      U = R.delaunay,\n      V = R.voronoi,\n      X = {\n        links: null,\n        cells: null,\n        points: null,\n        bounds: null\n      };\n    g && s.includes(\"links\") && (X.links = f(\"path\", {\n      stroke: w,\n      strokeWidth: k,\n      fill: \"none\",\n      d: U.render()\n    }, \"links\")), D && s.includes(\"cells\") && (X.cells = f(\"path\", {\n      d: V.render(),\n      fill: \"none\",\n      stroke: S,\n      strokeWidth: P\n    }, \"cells\")), z && s.includes(\"points\") && (X.points = f(\"path\", {\n      stroke: \"none\",\n      fill: B,\n      d: U.renderPoints(void 0, E / 2)\n    }, \"points\")), s.includes(\"bounds\") && (X.bounds = f(\"path\", {\n      fill: \"none\",\n      stroke: S,\n      strokeWidth: P,\n      d: V.renderBounds()\n    }, \"bounds\"));\n    var Y = L({\n      points: T,\n      delaunay: U,\n      voronoi: V\n    });\n    return f(a, {\n      width: G,\n      height: J,\n      margin: K,\n      role: I,\n      children: s.map(function (n, o) {\n        return void 0 !== X[n] ? X[n] : \"function\" == typeof n ? f(e, {\n          children: i(n, Y)\n        }, o) : null;\n      })\n    });\n  },\n  D = function (n) {\n    var e = n.theme,\n      i = function (n, e) {\n        if (null == n) return {};\n        var i,\n          o,\n          t = {},\n          r = Object.keys(n);\n        for (o = 0; o < r.length; o++) i = r[o], e.indexOf(i) >= 0 || (t[i] = n[i]);\n        return t;\n      }(n, w);\n    return f(l, {\n      isInteractive: !1,\n      animate: !1,\n      theme: e,\n      children: f(W, m({}, i))\n    });\n  },\n  M = function (n) {\n    return f(d, {\n      children: function (e) {\n        var i = e.width,\n          o = e.height;\n        return f(D, m({\n          width: i,\n          height: o\n        }, n));\n      }\n    });\n  },\n  P = function (e) {\n    var i = e.nodes,\n      l = e.width,\n      u = e.height,\n      a = e.x,\n      d = e.y,\n      c = e.onMouseEnter,\n      h = e.onMouseMove,\n      m = e.onMouseLeave,\n      y = e.onClick,\n      g = e.debug,\n      b = o(null),\n      k = t(null),\n      C = k[0],\n      L = k[1],\n      w = x({\n        points: i,\n        x: a,\n        y: d,\n        width: l,\n        height: u,\n        debug: g\n      }),\n      W = w.delaunay,\n      D = w.voronoi,\n      M = n(function () {\n        if (g && D) return D.render();\n      }, [g, D]),\n      P = r(function (n) {\n        if (!b.current) return [null, null];\n        var e = s(b.current, n),\n          o = e[0],\n          t = e[1],\n          r = W.find(o, t);\n        return [r, void 0 !== r ? i[r] : null];\n      }, [b, W]),\n      O = r(function (n) {\n        var e = P(n),\n          i = e[0],\n          o = e[1];\n        L(i), o && (null == c || c(o, n));\n      }, [P, L, c]),\n      S = r(function (n) {\n        var e = P(n),\n          i = e[0],\n          o = e[1];\n        L(i), o && (null == h || h(o, n));\n      }, [P, L, h]),\n      j = r(function (n) {\n        if (L(null), m) {\n          var e = void 0;\n          null !== C && (e = i[C]), e && m(e, n);\n        }\n      }, [L, C, m, i]),\n      z = r(function (n) {\n        var e = P(n),\n          i = e[0],\n          o = e[1];\n        L(i), o && (null == y || y(o, n));\n      }, [P, L, y]);\n    return v(\"g\", {\n      ref: b,\n      children: [g && D && v(p, {\n        children: [f(\"path\", {\n          d: M,\n          stroke: \"red\",\n          strokeWidth: 1,\n          opacity: .75\n        }), null !== C && f(\"path\", {\n          fill: \"pink\",\n          opacity: .35,\n          d: D.renderCell(C)\n        })]\n      }), f(\"rect\", {\n        width: l,\n        height: u,\n        fill: \"red\",\n        opacity: 0,\n        style: {\n          cursor: \"auto\"\n        },\n        onMouseEnter: O,\n        onMouseMove: S,\n        onMouseLeave: j,\n        onClick: z\n      })]\n    });\n  },\n  O = function (n, e) {\n    n.save(), n.globalAlpha = .75, n.beginPath(), e.render(n), n.strokeStyle = \"red\", n.lineWidth = 1, n.stroke(), n.restore();\n  },\n  S = function (n, e, i) {\n    n.save(), n.globalAlpha = .35, n.beginPath(), e.renderCell(i, n), n.fillStyle = \"red\", n.fill(), n.restore();\n  };\nexport { P as Mesh, M as ResponsiveVoronoi, D as Voronoi, k as computeMesh, b as computeMeshPoints, y as defaultVoronoiProps, S as renderVoronoiCellToCanvas, O as renderVoronoiToCanvas, C as useVoronoi, L as useVoronoiLayerContext, x as useVoronoiMesh };","map":{"version":3,"mappings":"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","names":["defaultVoronoiProps","xDomain","yDomain","layers","enableLinks","linkLineWidth","linkLineColor","enableCells","cellLineWidth","cellLineColor","enablePoints","pointSize","pointColor","role","getAccessor","directive","datum","computeMeshPoints","points","x","t","y","getX","getY","map","point","computeMesh","width","height","debug","delaunay","Delaunay","from","voronoi","undefined","useVoronoiMesh","points2d","useMemo","useVoronoi","data","xScale","scaleLinear","domain","range","yScale","d","p","useVoronoiLayerContext","InnerVoronoi","partialMargin","margin","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","layerById","links","cells","bounds","includes","_jsx","stroke","strokeWidth","fill","render","renderPoints","renderBounds","layerContext","SvgWrapper","layer","i","Fragment","createElement","Voronoi","theme","otherProps","Container","isInteractive","animate","ResponsiveVoronoi","props","ResponsiveWrapper","Mesh","nodes","onMouseEnter","onMouseMove","onMouseLeave","onClick","elementRef","useRef","k","useState","currentIndex","setCurrentIndex","voronoiPath","getIndexAndNodeFromEvent","useCallback","event","current","getRelativeCursor","index","find","handleMouseEnter","node","handleMouseMove","handleMouseLeave","previousNode","handleClick","_jsxs","ref","opacity","renderCell","style","cursor","renderVoronoiToCanvas","ctx","save","globalAlpha","beginPath","strokeStyle","lineWidth","restore","renderVoronoiCellToCanvas","fillStyle"],"sources":["/Users/pratyushgarg/Downloads/Web Development/final-density/density-hack-an-intern-flexbox/front-end/node_modules/@nivo/voronoi/src/props.ts","/Users/pratyushgarg/Downloads/Web Development/final-density/density-hack-an-intern-flexbox/front-end/node_modules/@nivo/voronoi/src/computeMesh.ts","/Users/pratyushgarg/Downloads/Web Development/final-density/density-hack-an-intern-flexbox/front-end/node_modules/@nivo/voronoi/src/hooks.ts","/Users/pratyushgarg/Downloads/Web Development/final-density/density-hack-an-intern-flexbox/front-end/node_modules/@nivo/voronoi/src/Voronoi.tsx","/Users/pratyushgarg/Downloads/Web Development/final-density/density-hack-an-intern-flexbox/front-end/node_modules/@nivo/voronoi/src/ResponsiveVoronoi.tsx","/Users/pratyushgarg/Downloads/Web Development/final-density/density-hack-an-intern-flexbox/front-end/node_modules/@nivo/voronoi/src/Mesh.tsx","/Users/pratyushgarg/Downloads/Web Development/final-density/density-hack-an-intern-flexbox/front-end/node_modules/@nivo/voronoi/src/meshCanvas.ts"],"sourcesContent":["import { VoronoiDomain, VoronoiLayer } from './types'\n\nexport const defaultVoronoiProps = {\n    xDomain: [0, 1] as VoronoiDomain,\n    yDomain: [0, 1] as VoronoiDomain,\n    layers: ['links', 'cells', 'points', 'bounds'] as VoronoiLayer[],\n    enableLinks: false,\n    linkLineWidth: 1,\n    linkLineColor: '#bbbbbb',\n    enableCells: true,\n    cellLineWidth: 2,\n    cellLineColor: '#000000',\n    enablePoints: true,\n    pointSize: 4,\n    pointColor: '#666666',\n    role: 'img',\n}\n","import { Delaunay } from 'd3-delaunay'\n\ntype NumberPropertyNames<T> = {\n    [K in keyof T]: T[K] extends number ? K : never\n}[keyof T]\n\nexport type XYAccessor<Datum> = NumberPropertyNames<Datum> | ((datum: Datum) => number)\n\nconst getAccessor = <Datum>(directive: XYAccessor<Datum>) =>\n    typeof directive === 'function' ? directive : (datum: Datum) => datum[directive]\n\n/**\n * The delaunay generator requires an array\n * where each point is defined as an array\n * of 2 elements: [x: number, y: number].\n *\n * Points represent the raw input data\n * and x/y represent accessors to x & y.\n */\nexport const computeMeshPoints = <Datum>({\n    points,\n    x = 'x' as NumberPropertyNames<Datum>,\n    y = 'y' as NumberPropertyNames<Datum>,\n}: {\n    points: Datum[]\n    x?: XYAccessor<Datum>\n    y?: XYAccessor<Datum>\n}): [number, number][] => {\n    const getX = getAccessor<Datum>(x)\n    const getY = getAccessor<Datum>(y)\n\n    return points.map(point => [getX(point) as number, getY(point) as number])\n}\n\nexport const computeMesh = ({\n    points,\n    width,\n    height,\n    debug,\n}: {\n    points: [number, number][]\n    width: number\n    height: number\n    debug?: boolean\n}) => {\n    const delaunay = Delaunay.from(points)\n    const voronoi = debug ? delaunay.voronoi([0, 0, width, height]) : undefined\n\n    return { delaunay, voronoi }\n}\n","import { useMemo } from 'react'\nimport { scaleLinear } from 'd3-scale'\nimport { Delaunay } from 'd3-delaunay'\nimport { computeMeshPoints, computeMesh, XYAccessor } from './computeMesh'\nimport { VoronoiCommonProps, VoronoiDatum, VoronoiCustomLayerProps } from './types'\n\nexport const useVoronoiMesh = <Datum>({\n    points,\n    x,\n    y,\n    width,\n    height,\n    debug,\n}: {\n    points: Datum[]\n    x?: XYAccessor<Datum>\n    y?: XYAccessor<Datum>\n    width: number\n    height: number\n    debug?: boolean\n}) => {\n    const points2d = useMemo(() => computeMeshPoints<Datum>({ points, x, y }), [points, x, y])\n\n    return useMemo(\n        () => computeMesh({ points: points2d, width, height, debug }),\n        [points2d, width, height, debug]\n    )\n}\n\nexport const useVoronoi = ({\n    data,\n    width,\n    height,\n    xDomain,\n    yDomain,\n}: {\n    data: VoronoiDatum[]\n    width: number\n    height: number\n    xDomain: VoronoiCommonProps['xDomain']\n    yDomain: VoronoiCommonProps['yDomain']\n}) => {\n    const xScale = useMemo(() => scaleLinear().domain(xDomain).range([0, width]), [xDomain, width])\n    const yScale = useMemo(\n        () => scaleLinear().domain(yDomain).range([0, height]),\n        [yDomain, height]\n    )\n\n    const points = useMemo(\n        () =>\n            data.map(d => ({\n                x: xScale(d.x),\n                y: yScale(d.y),\n                data: d,\n            })),\n        [data, xScale, yScale]\n    )\n\n    return useMemo(() => {\n        const delaunay = Delaunay.from(points.map(p => [p.x, p.y]))\n        const voronoi = delaunay.voronoi([0, 0, width, height])\n\n        return {\n            points,\n            delaunay,\n            voronoi,\n        }\n    }, [points, width, height])\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const useVoronoiLayerContext = ({\n    points,\n    delaunay,\n    voronoi,\n}: VoronoiCustomLayerProps): VoronoiCustomLayerProps =>\n    useMemo(\n        () => ({\n            points,\n            delaunay,\n            voronoi,\n        }),\n        [points, delaunay, voronoi]\n    )\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, SvgWrapper, useDimensions } from '@nivo/core'\nimport { VoronoiSvgProps, VoronoiLayerId } from './types'\nimport { defaultVoronoiProps } from './props'\nimport { useVoronoi, useVoronoiLayerContext } from './hooks'\n\ntype InnerVoronoiProps = Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data' | 'width' | 'height'>\n\nconst InnerVoronoi = ({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    layers = defaultVoronoiProps.layers,\n    xDomain = defaultVoronoiProps.xDomain,\n    yDomain = defaultVoronoiProps.yDomain,\n    enableLinks = defaultVoronoiProps.enableLinks,\n    linkLineWidth = defaultVoronoiProps.linkLineWidth,\n    linkLineColor = defaultVoronoiProps.linkLineColor,\n    enableCells = defaultVoronoiProps.enableCells,\n    cellLineWidth = defaultVoronoiProps.cellLineWidth,\n    cellLineColor = defaultVoronoiProps.cellLineColor,\n    enablePoints = defaultVoronoiProps.enableCells,\n    pointSize = defaultVoronoiProps.pointSize,\n    pointColor = defaultVoronoiProps.pointColor,\n    role = defaultVoronoiProps.role,\n}: InnerVoronoiProps) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { points, delaunay, voronoi } = useVoronoi({\n        data,\n        width: innerWidth,\n        height: innerHeight,\n        xDomain,\n        yDomain,\n    })\n\n    const layerById: Record<VoronoiLayerId, ReactNode> = {\n        links: null,\n        cells: null,\n        points: null,\n        bounds: null,\n    }\n\n    if (enableLinks && layers.includes('links')) {\n        layerById.links = (\n            <path\n                key=\"links\"\n                stroke={linkLineColor}\n                strokeWidth={linkLineWidth}\n                fill=\"none\"\n                d={delaunay.render()}\n            />\n        )\n    }\n\n    if (enableCells && layers.includes('cells')) {\n        layerById.cells = (\n            <path\n                key=\"cells\"\n                d={voronoi.render()}\n                fill=\"none\"\n                stroke={cellLineColor}\n                strokeWidth={cellLineWidth}\n            />\n        )\n    }\n\n    if (enablePoints && layers.includes('points')) {\n        layerById.points = (\n            <path\n                key=\"points\"\n                stroke=\"none\"\n                fill={pointColor}\n                d={delaunay.renderPoints(undefined, pointSize / 2)}\n            />\n        )\n    }\n\n    if (layers.includes('bounds')) {\n        layerById.bounds = (\n            <path\n                key=\"bounds\"\n                fill=\"none\"\n                stroke={cellLineColor}\n                strokeWidth={cellLineWidth}\n                d={voronoi.renderBounds()}\n            />\n        )\n    }\n\n    const layerContext = useVoronoiLayerContext({\n        points,\n        delaunay,\n        voronoi,\n    })\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (layerById[layer as VoronoiLayerId] !== undefined) {\n                    return layerById[layer as VoronoiLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Voronoi = ({\n    theme,\n    ...otherProps\n}: Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data' | 'width' | 'height'>) => (\n    <Container isInteractive={false} animate={false} theme={theme}>\n        <InnerVoronoi {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { VoronoiSvgProps } from './types'\nimport { Voronoi } from './Voronoi'\n\ntype ResponsiveVoronoiProps = Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data'>\n\nexport const ResponsiveVoronoi = (props: ResponsiveVoronoiProps) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Voronoi width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { useRef, useState, useCallback, useMemo } from 'react'\nimport * as React from 'react'\nimport { getRelativeCursor } from '@nivo/core'\nimport { useVoronoiMesh } from './hooks'\nimport { XYAccessor } from './computeMesh'\n\ntype MouseHandler<Datum> = (datum: Datum, event: React.MouseEvent) => void\n\ninterface MeshProps<Datum> {\n    nodes: Datum[]\n    width: number\n    height: number\n    x?: XYAccessor<Datum>\n    y?: XYAccessor<Datum>\n    onMouseEnter?: MouseHandler<Datum>\n    onMouseMove?: MouseHandler<Datum>\n    onMouseLeave?: MouseHandler<Datum>\n    onClick?: MouseHandler<Datum>\n    debug?: boolean\n}\n\nexport const Mesh = <Datum,>({\n    nodes,\n    width,\n    height,\n    x,\n    y,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    debug,\n}: MeshProps<Datum>) => {\n    const elementRef = useRef<SVGGElement>(null)\n    const [currentIndex, setCurrentIndex] = useState<number | null>(null)\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points: nodes,\n        x,\n        y,\n        width,\n        height,\n        debug,\n    })\n\n    const voronoiPath = useMemo(() => {\n        if (debug && voronoi) {\n            return voronoi.render()\n        }\n\n        return undefined\n    }, [debug, voronoi])\n\n    const getIndexAndNodeFromEvent = useCallback(\n        event => {\n            if (!elementRef.current) {\n                return [null, null]\n            }\n\n            const [x, y] = getRelativeCursor(elementRef.current, event)\n            const index = delaunay.find(x, y)\n\n            return [index, index !== undefined ? nodes[index] : null] as [number, Datum | null]\n        },\n        [elementRef, delaunay]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent) => {\n            const [index, node] = getIndexAndNodeFromEvent(event)\n            setCurrentIndex(index)\n            if (node) {\n                onMouseEnter?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromEvent, setCurrentIndex, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: React.MouseEvent) => {\n            const [index, node] = getIndexAndNodeFromEvent(event)\n            setCurrentIndex(index)\n            if (node) {\n                onMouseMove?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromEvent, setCurrentIndex, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent) => {\n            setCurrentIndex(null)\n            if (onMouseLeave) {\n                let previousNode: Datum | undefined = undefined\n                if (currentIndex !== null) {\n                    previousNode = nodes[currentIndex]\n                }\n                previousNode && onMouseLeave(previousNode, event)\n            }\n        },\n        [setCurrentIndex, currentIndex, onMouseLeave, nodes]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent) => {\n            const [index, node] = getIndexAndNodeFromEvent(event)\n            setCurrentIndex(index)\n            if (node) {\n                onClick?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromEvent, setCurrentIndex, onClick]\n    )\n\n    return (\n        <g ref={elementRef}>\n            {debug && voronoi && (\n                <>\n                    <path d={voronoiPath} stroke=\"red\" strokeWidth={1} opacity={0.75} />\n                    {/* highlight current cell */}\n                    {currentIndex !== null && (\n                        <path fill=\"pink\" opacity={0.35} d={voronoi.renderCell(currentIndex)} />\n                    )}\n                </>\n            )}\n            {/* transparent rect to intercept mouse events */}\n            <rect\n                width={width}\n                height={height}\n                fill=\"red\"\n                opacity={0}\n                style={{ cursor: 'auto' }}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        </g>\n    )\n}\n","import { Delaunay, Voronoi } from 'd3-delaunay'\n\nexport const renderVoronoiToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    voronoi: Voronoi<Delaunay.Point>\n) => {\n    ctx.save()\n\n    ctx.globalAlpha = 0.75\n    ctx.beginPath()\n    voronoi.render(ctx)\n    ctx.strokeStyle = 'red'\n    ctx.lineWidth = 1\n    ctx.stroke()\n\n    ctx.restore()\n}\n\nexport const renderVoronoiCellToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    voronoi: Voronoi<Delaunay.Point>,\n    index: number\n) => {\n    ctx.save()\n\n    ctx.globalAlpha = 0.35\n    ctx.beginPath()\n    voronoi.renderCell(index, ctx)\n    ctx.fillStyle = 'red'\n    ctx.fill()\n\n    ctx.restore()\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}